//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title: (Sequence Generator)
// Files: (Sequence.java, GeometricSequenceGenerator.java, 
// FibonacciSequenceGenerator.java, DigitProductSequenceGenerator.java, 
// and SequenceGeneratorTests.java)
// Course: (CS300, Fall, 2018)
//
// Author: (Tony Schulz)
// Email: (schulz22@wisc.edu)
// Lecturer's Name: (Gary Dahl)
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner: NONE
// Partner Email: 
// Partner Lecturer's Name: 
//
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
// __ Write-up states that pair programming is allowed for this assignment.
// __ We have both read and understand the course Pair Programming Policy.
// __ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully
// acknowledge and credit those sources of help here. Instructors and TAs do
// not need to be credited here, but tutors, friends, relatives, room mates,
// strangers, and others do. If you received no outside help from either type
// of source, then please explicitly indicate NONE.
//
// Persons: NONE
// Online Sources: NONE
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////


 import java.util.Iterator;

// ADD import statements here as needed
 
/**
 * This class represents a geometric sequence (a sequence in which each
 * term is the product of the previous term and a chosen number, referred to as the 'ratio'). 
 * The terms for the sequence are set in the constructor.
 * This class implements the Iterator<Integer> interface.
 * @author Anthony Schulz
 *
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence
  
  
 
  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method
 
  // constructor
  /**
   * Constructs a new GeometricSequenceGenerator.
   * @param init the initial value/first term of the sequence.
   * @param ratio the common ratio between each of the terms (eg 3, 12, 48... has a ratio of 4)
   * @param size the number of elements in the sequence- its size
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    if (init <= 0 || ratio <= 0) throw new IllegalArgumentException("WARNING: The starting "
        + "element and the common ratio for a geometric progression should be STRICTLY POSITIVE.");
    
    if (size <= 0) throw new IllegalArgumentException("WARNING: CANNOT create a sequence with size <= zero.");
    
    this.INIT = init;
    this.RATIO = ratio;
    this.SIZE = size;
    this.generatedCount = 0;
  }
 

  // TODO implement hasNext(), and next() methods here
  /**
   * Determines whether or not the sequence is 'finished,' which means whether it is the size specified
   * in the 'size' parameter of the constructor
   * @return returns true if the sequence still needs more terms to be complete, and false otherwise
   */
  
  @Override
  public boolean hasNext() {
    //Time Complexity: O(3)
    
    if (this.generatedCount < this.SIZE) {
      return true;
    }else {
      return false;
    }
  }
 
  /**
   * generates the next element in the iteration and returns the current one in the same iteration
   */
  @Override
  public Integer next() {
    //Time Complexity: O(N) where N is this.generatedCount
    int result = this.INIT;
    for (int i = 0; i < this.generatedCount + 1; i++) {
      result = result * RATIO;
    }
    this.next = result;
    this.generatedCount++;
    return result / RATIO;
  }
 
  // You can add local variable to your hasNext() or next() method to implement their correct behavior if needed
  // You can add public getters and setters methods as needed to implement your test methods here
  // You CANNOT define mutators for any final field
 
 
}